const monthNames = ["Janvier", "Février", "Mars", "Avril", "Mai", "Juin", "Juillet", "Août", "Septembre", "Octobre", "Novembre", "Décembre"];
const daysOfWeek = ["Lundi", "Mardi", "Mercredi", "Jeudi", "Vendredi", "Samedi", "Dimanche"];
let currentDate = new Date();
let today = new Date();

function showConfirmationModal() {
    const modal = document.getElementById("confirmationModal");
    const span = document.getElementsByClassName("close")[0];

    modal.style.display = "block";

    // When the user clicks on <span> (x), close the modal
    span.onclick = function() {
        modal.style.display = "none";
    }

    // When the user clicks anywhere outside of the modal, close it
    window.onclick = function(event) {
        if (event.target == modal) {
            modal.style.display = "none";
        }
    }
}
async function loadAppointments() {
    console.log('Fetching appointments...');
    const response = await fetch('agenda.php');
    const appointments = await response.json();
    console.log('Appointments loaded:', appointments);
    return appointments;
}

function addEventToCalendar(eventDate, eventTime, eventDuration) {
    const [year, month, day] = eventDate.split('-');
    const [hour, minute] = eventTime.split(':');
    const eventStartDateTime = new Date(year, month - 1, day, hour, minute);

    const tableBody = document.getElementById("agenda-body");
    const rows = tableBody.getElementsByTagName("tr");

    for (let i = 0; i < rows.length; i++) {
        const row = rows[i];
        const rowTime = row.cells[0].innerText;
        const [rowHour] = rowTime.split(':');

        if (parseInt(rowHour) === eventStartDateTime.getHours()) {
            const dayIndex = (eventStartDateTime.getDay() + 6) % 7; // Adjust for 0-indexed days
            for (let j = 0; j < eventDuration; j++) {
                const cellIndex = dayIndex + 1; // Adjust for time column
                const rowIndex = i + j; // Calculate the row index based on duration
                if (rowIndex < rows.length) {
                    const cell = rows[rowIndex].cells[cellIndex];
                    cell.innerHTML = ""; // Clear existing content
                    cell.style.backgroundColor = "red";
                }
            }
            break;
        }
    }
}

function formatDate(date) {
    const year = date.getFullYear();
    const month = String(date.getMonth() + 1).padStart(2, '0'); // Ajoute un zéro au début si le mois est inférieur à 10
    const day = String(date.getDate()).padStart(2, '0'); // Ajoute un zéro au début si le jour est inférieur à 10
    return `${year}-${month}-${day}`;
}

async function updateCalendar() {
    const monthName = monthNames[currentDate.getMonth()];
    const yearNumber = currentDate.getFullYear();
    document.getElementById("month-name").textContent = monthName;
    document.getElementById("year-number").textContent = yearNumber;

    const agendaBody = document.getElementById("agenda-body");
    agendaBody.innerHTML = ""; // Clear existing rows

    // Calculer les dates pour chaque jour de la semaine
    const startOfWeek = getStartOfWeek(currentDate);
    const dateRow = document.getElementById("date-row");
    dateRow.innerHTML = "<th></th>"; // Clear existing dates and add empty cell for time column

    const appointments = await loadAppointments(); // Load appointments once

    for (let i = 0; i < 7; i++) {
        const date = new Date(startOfWeek);
        date.setDate(startOfWeek.getDate() + i);
        const dateCell = document.createElement("th");

        // Ajouter la classe 'current-date' si la date correspond à la date actuelle
        if (date.toDateString() === today.toDateString()) {
            dateCell.classList.add("current-date");
        }

        dateCell.textContent = `${date.getDate()}/${date.getMonth() + 1}`;
        dateRow.appendChild(dateCell);
    }

    for (let hour = 8; hour <= 20; hour++) {
        const row = document.createElement("tr");
        const hourCell = document.createElement("td");
        hourCell.textContent = `${hour}:00`;
        row.appendChild(hourCell);

        for (let day = 0; day < 7; day++) {
            const cell = document.createElement("td");
            cell.style.backgroundColor = "green"; // Set background color to green
            row.appendChild(cell);
        }
        agendaBody.appendChild(row);
    }

    // Ajouter les rendez-vous après avoir généré les cellules
    for (let i = 0; i < 7; i++) {
        const date = new Date(startOfWeek);
        date.setDate(startOfWeek.getDate() + i);
        const formattedDate = formatDate(date);
        
        appointments.forEach(appointment => {
            if (appointment.Date === formattedDate) {
                addEventToCalendar(appointment.Date, appointment.Horraire, appointment.Numero_etudiant);
            }
        });
    }
}

function getStartOfWeek(date) {
    const startOfWeek = new Date(date);
    const day = startOfWeek.getDay();
    const diff = startOfWeek.getDate() - day + (day === 0 ? -6 : 1); // Adjust when day is sunday
    startOfWeek.setDate(diff);
    return startOfWeek;
}

document.getElementById("prev").addEventListener("click", () => {
    currentDate.setDate(currentDate.getDate() - 7);
    updateCalendar();
});

document.getElementById("next").addEventListener("click", () => {
    currentDate.setDate(currentDate.getDate() + 7);
    updateCalendar();
});

document.getElementById("event-form").addEventListener("submit", function(event) {
    event.preventDefault();
    const eventDate = document.getElementById("event-date").value;
    const eventTime = document.getElementById("event-time").value;
    const eventDuration = parseInt(document.getElementById("event-duration").value);
    const eventDescription = document.getElementById("event-description").value;

    addEventToCalendar(eventDate, eventTime, eventDuration);
});

// Initial call to set up the calendar
updateCalendar();


